# -*- coding: utf-8 -*-
"""assignment_sol.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1M52Aa5dyvmBtZYxt0MtmX875gmaCaK8w

# Skygeni Assignment for Data Engineering Role
"""

import pandas as pd  # For data manipulation and analysis
import matplotlib.pyplot as plt  # For creating visualizations (charts/graphs)
from google.colab import files  # For handling file uploads/downloads in Colab

uploaded = files.upload()  # Upload files from the local system to Colab environment

"""#1. How many finance lending and blockchain clients does the organization have?"""

# Once uploaded, read them into pandas DataFrames
subscription_df = pd.read_csv("subscription_information.csv")  # Read subscription data into DataFrame
payment_df = pd.read_csv("payment_information.csv")  # Read payment data into DataFrame
industry_df = pd.read_csv("industry_client_details.csv")  # Read industry client details into DataFrame
finance_df = pd.read_csv("finanical_information.csv")  # Read financial information into DataFrame

# Filter clients in Finance Lending and Blockchain industries, then count unique client IDs
finance_blockchain_clients = industry_df[industry_df['industry'].isin(['Finance Lending', 'Block Chain'])]
num_finance_blockchain_clients = finance_blockchain_clients['client_id'].nunique()  # Get the unique client count
print("Q1: Number of Finance Lending & Blockchain Clients:", num_finance_blockchain_clients)  # Print the result

"""#2. Which industry in the organization has the highest renewal rate?"""

# Merge subscription data with industry data on 'client_id' using a left join
merged_subscription = pd.merge(subscription_df, industry_df, on='client_id', how='left')

# Calculate the renewal rate (mean of 'renewed') for each industry
renewal_rates = merged_subscription.groupby('industry')['renewed'].mean()

# Identify the industry with the highest renewal rate
industry_with_highest_renewal = renewal_rates.idxmax()

# Get the highest renewal rate
highest_renewal_rate = renewal_rates.max()

# Print the results
print("Q2: Industry with Highest Renewal Rate:", industry_with_highest_renewal)
print("Renewal Rate: {:.2f}%".format(highest_renewal_rate * 100))

"""#3. What was the average inflation rate when their subscriptions were renewed?"""

# Convert 'end_date' in subscription_df to datetime format
subscription_df['end_date'] = pd.to_datetime(subscription_df['end_date'])

# Convert 'start_date' and 'end_date' in finance_df to datetime format
finance_df['start_date'] = pd.to_datetime(finance_df['start_date'])
finance_df['end_date'] = pd.to_datetime(finance_df['end_date'])

# Filter subscriptions that have been renewed
renewed_subs = subscription_df[subscription_df['renewed'] == True]

# Function to find the inflation rate based on the renewal date

def find_inflation_rate(renewal_date):
    # Match rows in finance_df where the renewal_date is within the 'start_date' and 'end_date' range
    match = finance_df[(finance_df['start_date'] <= renewal_date) & (finance_df['end_date'] >= renewal_date)]
    if not match.empty:
        return match.iloc[0]['inflation_rate']  # Return the inflation rate for the matched row
    return None  # Return None if no match is found

# Create a copy of renewed_subs to avoid modifying the original DataFrame
renewed_subs = renewed_subs.copy()

# Apply the find_inflation_rate function to the 'end_date' column and create a new 'inflation_rate' column
renewed_subs['inflation_rate'] = renewed_subs['end_date'].apply(find_inflation_rate)

# Calculate the average inflation rate for the renewed subscriptions
average_inflation_rate = renewed_subs['inflation_rate'].dropna().mean()

# Print the average inflation rate at the time of renewal
print("Q3: Average Inflation Rate at Renewal: {:.2f}%".format(average_inflation_rate))

"""#4. What was the average inflation rate when their subscriptions were renewed?

"""

# Convert 'payment_date' column in payment_df to datetime format
payment_df['payment_date'] = pd.to_datetime(payment_df['payment_date'])

# Extract the year from the 'payment_date' and create a new 'year' column
payment_df['year'] = payment_df['payment_date'].dt.year

# Calculate the median amount paid for each year
median_payments_by_year = payment_df.groupby('year')['amount_paid'].median()

# Print the median amount paid per year
print("Q4: Median Amount Paid per Year:")
for year, median in median_payments_by_year.items():
    print(f"  {year}: ₹{median:.2f}")

# Plot a bar chart for the median amount paid per year
median_payments_by_year.plot(kind='bar')
plt.title("Median Amount Paid per Year")
plt.ylabel("Amount Paid (₹)")
plt.xlabel("Year")
plt.show()







